{"version":3,"sources":["components/answer.js","components/trivia.js","categoryList.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["Answer","_this","this","react_default","a","createElement","onClick","props","submitAnswer","value","Component","Trivia","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","questionNumber","category","correct_answer","difficulty","incorrect_answers","question","answers","loading","getQuestionData","bind","assertThisInitialized","decodeHTML","shuffleArray","html","txt","document","innerHTML","i","length","j","Math","floor","random","_ref","currentQuestion","questions","decodedQuestion","push","correctAnswer","setState","data","_this2","console","log","isTriviaSwitch","_this3","_this$state","map","answer","answerDecoded","answer_Answer","categories","id","name","menu","isRulesToggled","isCategoriesToggled","toggleRules","toggleCategories","className","applyCategory","key","triviaSwitch","App","error","isTrivia","isTriviaMenu","questionsNumber","apiCall","switchTriviaMenu","URL","fetch","then","response","json","results","catch","concat","menu_menu","trivia_Trivia","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAEqBA,mLACR,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAML,EAAKM,MAAMC,aAAaP,EAAKM,MAAME,SAASP,KAAKK,MAAME,eAJ1DC,aCCfC,cACjB,SAAAA,EAAYJ,GAAM,IAAAN,EAAA,OAAAW,OAAAC,EAAA,EAAAD,CAAAV,KAAAS,IACdV,EAAAW,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAd,KAAMK,KACDU,MAAQ,CACTC,eAAgB,EAChBC,SAAU,GACVC,eAAgB,GAChBC,WAAY,GACZC,kBAAmB,GACnBC,SAAU,GACVC,QAAS,GACTC,SAAS,GAEbxB,EAAKyB,gBAAkBzB,EAAKyB,gBAAgBC,KAArBf,OAAAgB,EAAA,EAAAhB,CAAAX,IACvBA,EAAK4B,WAAa5B,EAAK4B,WAAWF,KAAhBf,OAAAgB,EAAA,EAAAhB,CAAAX,IAClBA,EAAK6B,aAAe7B,EAAK6B,aAAaH,KAAlBf,OAAAgB,EAAA,EAAAhB,CAAAX,IACpBA,EAAKO,aAAeP,EAAKO,aAAamB,KAAlBf,OAAAgB,EAAA,EAAAhB,CAAAX,IAfNA,0EAkBP8B,GACP,IAAIC,EAAMC,SAAS5B,cAAc,YAEjC,OADA2B,EAAIE,UAAYH,EACTC,EAAIvB,2CAGFL,GACT,IAAK,IAAI+B,EAAI/B,EAAEgC,OAAO,EAAGD,EAAI,EAAGA,IAAK,CACjC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADTM,EAElB,CAACrC,EAAEiC,GAAIjC,EAAE+B,IAAvB/B,EAAE+B,GAF8BM,EAAA,GAE1BrC,EAAEiC,GAFwBI,EAAA,GAIrC,OAAOrC,4CAIP,IAAMsC,EAAkBxC,KAAKK,MAAMoC,UAAUzC,KAAKe,MAAMC,gBAClD0B,EAAkB1C,KAAK2B,WAAWa,EAAgBnB,UACpDD,EAAoBoB,EAAgBpB,kBACxCA,EAAkBuB,KAAKH,EAAgBtB,gBACvC,IAAMI,EAAUtB,KAAK4B,aAAaR,GAC5BwB,EAAgB5C,KAAK2B,WAAWa,EAAgBtB,gBACtDlB,KAAK6C,SAAS,CACV5B,SAAUuB,EAAgBvB,SAC1BC,eAAgB0B,EAChBzB,WAAYqB,EAAgBrB,WAC5BC,kBAAmBoB,EAAgBpB,kBACnCC,SAAUqB,EACVpB,QAASA,EACTC,SAAS,yCAIJuB,GAAM,IAAAC,EAAA/C,KACX8C,IAAS9C,KAAKe,MAAMG,eACpBlB,KAAKe,MAAMC,iBAAmBhB,KAAKK,MAAMoC,UAAUP,OAAS,GAC5Dc,QAAQC,IAAI,kDACZjD,KAAKK,MAAM6C,mBAEXF,QAAQC,IAAI,mFAEZjD,KAAK6C,SAAS,CACV7B,eAAgBhB,KAAKe,MAAMC,eAAiB,GAC7C,WACC+B,EAAKvB,qBAILxB,KAAKe,MAAMC,iBAAmBhB,KAAKK,MAAMoC,UAAUP,OAAS,GAC5Dc,QAAQC,IAAI,kDACZjD,KAAKK,MAAM6C,mBAEXF,QAAQC,IAAI,kFACZjD,KAAK6C,SAAS,CACV7B,eAAgBhB,KAAKe,MAAMC,eAAiB,GAC7C,WACC+B,EAAKvB,iEAOjBxB,KAAKwB,mDAGA,IAAA2B,EAAAnD,KAAAoD,EAC4DpD,KAAKe,MAA/DG,EADFkC,EACElC,eAAgBC,EADlBiC,EACkBjC,WAAYE,EAD9B+B,EAC8B/B,SAAUC,EADxC8B,EACwC9B,QAC7C,OAFK8B,EACiD7B,QAE3CtB,EAAAC,EAAAC,cAAA,sBAGPF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wBAAgBgB,GAChBlB,EAAAC,EAAAC,cAAA,UAAKkB,GACLpB,EAAAC,EAAAC,cAAA,6BAAqBe,GACrBjB,EAAAC,EAAAC,cAAA,UAEQmB,EAAQ+B,IAAI,SAAAC,GACR,IAAMC,EAAgBJ,EAAKxB,WAAW2B,GACtC,OAAOrD,EAAAC,EAAAC,cAACqD,EAAD,CAAQjD,MAAOgD,EAAejD,aAAc6C,EAAK7C,0BAlGhDE,aCHvBiD,SAAa,CACtB,CACAC,GAAM,EACNC,KAAQ,qBAER,CACAD,GAAM,GACNC,KAAQ,wBAER,CACAD,GAAM,GACNC,KAAQ,uBAER,CACAD,GAAM,GACNC,KAAQ,wBAER,CACAD,GAAM,GACNC,KAAQ,sCAER,CACAD,GAAM,GACNC,KAAQ,6BAER,CACAD,GAAM,GACNC,KAAQ,8BAER,CACAD,GAAM,GACNC,KAAQ,8BAER,CACAD,GAAM,GACNC,KAAQ,oBAER,CACAD,GAAM,GACNC,KAAQ,sBAER,CACAD,GAAM,GACNC,KAAQ,wBAER,CACAD,GAAM,GACNC,KAAQ,aAER,CACAD,GAAM,GACNC,KAAQ,UAER,CACAD,GAAM,GACNC,KAAQ,aAER,CACAD,GAAM,GACNC,KAAQ,WAER,CACAD,GAAM,GACNC,KAAQ,YAER,CACAD,GAAM,GACNC,KAAQ,OAER,CACAD,GAAM,GACNC,KAAQ,eAER,CACAD,GAAM,GACNC,KAAQ,WAER,CACAD,GAAM,GACNC,KAAQ,YAER,CACAD,GAAM,GACNC,KAAQ,yBAER,CACAD,GAAM,GACNC,KAAQ,oBAER,CACAD,GAAM,GACNC,KAAQ,yCAER,CACAD,GAAM,GACNC,KAAQ,yCC3FSC,cAEjB,SAAAA,EAAYvD,GAAO,IAAAN,EAAA,OAAAW,OAAAC,EAAA,EAAAD,CAAAV,KAAA4D,IACf7D,EAAAW,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAkD,GAAA9C,KAAAd,KAAOK,KACFU,MAAQ,CACT8C,gBAAgB,EAChBC,qBAAqB,GAEzB/D,EAAKgE,YAAchE,EAAKgE,YAAYtC,KAAjBf,OAAAgB,EAAA,EAAAhB,CAAAX,IACnBA,EAAKiE,iBAAmBjE,EAAKiE,iBAAiBvC,KAAtBf,OAAAgB,EAAA,EAAAhB,CAAAX,IAPTA,6EAWfC,KAAK6C,SAAS,CACVgB,gBAAiB7D,KAAKe,MAAM8C,eAC5BC,qBAAqB,+CAKzB9D,KAAK6C,SAAS,CACViB,qBAAsB9D,KAAKe,MAAM+C,oBACjCD,gBAAgB,qCAKf,IAAAd,EAAA/C,KAAAoD,EACyCpD,KAAKe,MAA5C8C,EADFT,EACES,eAAgBC,EADlBV,EACkBU,oBACvB,OACJ7D,EAAAC,EAAAC,cAAA,OAAK8D,UAAU,uBAEbH,EAkBa7D,EAAAC,EAAAC,cAAA,OAAK8D,UAAU,wBAElChE,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,MAAI8D,UAAU,iBACVhE,EAAAC,EAAAC,cAAA,MAAI8D,UAAU,iBAAgBhE,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAC3C2C,EAAK1C,MAAM6D,cAAc,GACzBnB,EAAKiB,qBAFqB,6BAI7BP,EAAWJ,IAAI,SAAApC,GACZ,OAAOhB,EAAAC,EAAAC,cAAA,MACP8D,UAAU,gBACVE,IAAKlD,EAASyC,IAAIzD,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAC/B2C,EAAK1C,MAAM6D,cAAcjD,EAASyC,IAClCX,EAAKiB,qBAEP/C,EAAS0C,WAlCS1D,EAAAC,EAAAC,cAAA,OAAK8D,UAAU,UACvChE,EAAAC,EAAAC,cAAA,MAAI8D,UAAU,SAAd,eAGAhE,EAAAC,EAAAC,cAAA,OAAK8D,UAAU,YACfhE,EAAAC,EAAAC,cAAA,UAAQ8D,UAAU,yBAAyB7D,QAASJ,KAAK+D,aACrD9D,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAG8D,UAAU,gBAAjB,WAEJhE,EAAAC,EAAAC,cAAA,UAAQ8D,UAAU,2BAA2B7D,QAAS,WAClD2C,EAAKiB,mBACLjB,EAAK1C,MAAM+D,iBAGXnE,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAG8D,UAAU,eAAjB,iBAGCJ,EAAiB5D,EAAAC,EAAAC,cAAA,KAAG8D,UAAU,cAAb,2FAAkHhE,EAAAC,EAAAC,cAAA,WAAlH,qGAA0NF,EAAAC,EAAAC,cAAA,WAA1N,6DAA0RF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAA/R,qBACT,cAjDiBK,aCCb6D,qBACnB,SAAAA,EAAYhE,GAAO,IAAAN,EAAA,OAAAW,OAAAC,EAAA,EAAAD,CAAAV,KAAAqE,IACjBtE,EAAAW,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAA2D,GAAAvD,KAAAd,KAAMK,KACDU,MAAQ,CACXuD,MAAO,KACP7B,UAAW,KACX8B,UAAU,EACVC,cAAc,EACdvD,SAAU,EACVE,WAAY,EACZsD,gBAAiB,IAEnB1E,EAAKmD,eAAiBnD,EAAKmD,eAAezB,KAApBf,OAAAgB,EAAA,EAAAhB,CAAAX,IACtBA,EAAK2E,QAAU3E,EAAK2E,QAAQjD,KAAbf,OAAAgB,EAAA,EAAAhB,CAAAX,IACfA,EAAKmE,cAAgBnE,EAAKmE,cAAczC,KAAnBf,OAAAgB,EAAA,EAAAhB,CAAAX,IACrBA,EAAK4E,iBAAmB5E,EAAK4E,iBAAiBlD,KAAtBf,OAAAgB,EAAA,EAAAhB,CAAAX,IAdPA,uEAiBX6E,GAAK,IAAA7B,EAAA/C,KACX6E,MAAMD,GACLE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAhC,GACJC,EAAKF,SAAS,CACZJ,UAAWK,EAAKmC,QAChBX,OAAO,MAIVY,MAAM,SAAAZ,GAAK,OAAItB,QAAQsB,MAAMA,IAAQ,WACpCvB,EAAKF,SAAS,CACZyB,OAAO,mDAMXtE,KAAK0E,QAAQ,kFAGE,IAAAvB,EAAAnD,KACfA,KAAK6C,SAAS,CACZ0B,UAAWvE,KAAKe,MAAMwD,UACrB,WAC2B,IAAxBpB,EAAKpC,MAAME,UAA0C,IAAxBkC,EAAKpC,MAAME,SAC1CkC,EAAKuB,QAAQ,kDAAkDvB,EAAKpC,MAAME,UAE1EkC,EAAKuB,QAAQ,iFAKLzD,GACZjB,KAAK2E,mBACL3E,KAAK6C,SAAS,CACZ0B,UAAU,EACVtD,SAAUA,IAEK,IAAbA,EACFjB,KAAK0E,QAAQ,0CAEb1E,KAAK0E,QAAL,kDAAAS,OAA+DlE,IAC/D+B,QAAQC,IAAI,qBAAuBhC,+CAKrCjB,KAAK6C,SAAS,CACZ2B,cAAexE,KAAKe,MAAMyD,gDAIrB,IAAApB,EACqCpD,KAAKe,MAA1CwD,EADAnB,EACAmB,SAAU9B,EADVW,EACUX,UAAW+B,EADrBpB,EACqBoB,aAC5B,OAAK/B,EAIHxC,EAAAC,EAAAC,cAAA,OAAK8D,UAAU,kBACbhE,EAAAC,EAAAC,cAAA,OAAK8D,UAAU,mBACfhE,EAAAC,EAAAC,cAACiF,EAAD,CAAMlB,cAAelE,KAAKkE,cAAeE,aAAcpE,KAAK2E,mBAC3DH,EAAevE,EAAAC,EAAAC,cAAA,OAAK8D,UAAU,eACpCjE,KAAKe,MAAMwD,SAAWtE,EAAAC,EAAAC,cAACkF,EAAD,CAAQ5C,UAAWzC,KAAKe,MAAM0B,UAAWS,eAAgBlD,KAAKkD,iBAAoB,cACzGjD,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,KAAKkD,gBAAiBqB,EAAW,OAAS,WAC5C,OATJtE,EAAAC,EAAAC,cAAA,6BA1EoBK,cCOb8E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3F,EAAAC,EAAAC,cAAC0F,EAAD,MAAS9D,SAAS+D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.db0bddb3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Answer extends Component {\r\n    render() {\r\n        return (\r\n            <li>\r\n                <button onClick={() => this.props.submitAnswer(this.props.value)}>{this.props.value}</button>\r\n            </li>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Answer from './answer';\r\n\r\nexport default class Trivia extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            questionNumber: 0,\r\n            category: '',\r\n            correct_answer: '',\r\n            difficulty: '',\r\n            incorrect_answers: [],\r\n            question: '',\r\n            answers: [],\r\n            loading: true\r\n        }\r\n        this.getQuestionData = this.getQuestionData.bind(this);\r\n        this.decodeHTML = this.decodeHTML.bind(this);\r\n        this.shuffleArray = this.shuffleArray.bind(this);\r\n        this.submitAnswer = this.submitAnswer.bind(this);\r\n    }\r\n\r\n    decodeHTML(html) {\r\n        let txt = document.createElement(\"textarea\");\r\n        txt.innerHTML = html;\r\n        return txt.value;\r\n    }\r\n\r\n    shuffleArray(a) {\r\n        for (let i = a.length-1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n        return a;\r\n    }\r\n\r\n    getQuestionData() {\r\n        const currentQuestion = this.props.questions[this.state.questionNumber];\r\n        const decodedQuestion = this.decodeHTML(currentQuestion.question);\r\n        let incorrect_answers = currentQuestion.incorrect_answers;\r\n        incorrect_answers.push(currentQuestion.correct_answer);\r\n        const answers = this.shuffleArray(incorrect_answers);\r\n        const correctAnswer = this.decodeHTML(currentQuestion.correct_answer);\r\n        this.setState({\r\n            category: currentQuestion.category,\r\n            correct_answer: correctAnswer,\r\n            difficulty: currentQuestion.difficulty,\r\n            incorrect_answers: currentQuestion.incorrect_answers,\r\n            question: decodedQuestion,\r\n            answers: answers,\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    submitAnswer(data) {\r\n        if (data === this.state.correct_answer) {\r\n        if (this.state.questionNumber === this.props.questions.length - 1) {\r\n            console.log('right answer. set isTrivia to false (overflow)')\r\n            this.props.isTriviaSwitch()\r\n        } else {\r\n            console.log('right answer. next question number (+1 state) and update question (no overflow)');\r\n\r\n            this.setState({\r\n                questionNumber: this.state.questionNumber + 1\r\n            }, () => {\r\n                this.getQuestionData();\r\n            });\r\n        }\r\n        } else {\r\n            if (this.state.questionNumber === this.props.questions.length - 1) {\r\n                console.log('wrong answer + overflow. set isTrivia to false')\r\n                this.props.isTriviaSwitch()\r\n            } else {\r\n                console.log('no overflow + wrong answer next question number (+1 state) and update question')\r\n                this.setState({\r\n                    questionNumber: this.state.questionNumber + 1\r\n                }, () => {\r\n                    this.getQuestionData();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getQuestionData()\r\n    }\r\n\r\n    render() {\r\n        const {correct_answer, difficulty, question, answers, loading} = this.state;\r\n        if (loading) {\r\n            return <h1>loading!</h1>\r\n        } else {\r\n        return (\r\n            <div>\r\n                <p>difficulty: {difficulty}</p>\r\n                <h3>{question}</h3>\r\n                <h4>correct answer: {correct_answer}</h4>\r\n                <ul>\r\n                    {\r\n                        answers.map(answer => {\r\n                            const answerDecoded = this.decodeHTML(answer);\r\n                            return <Answer value={answerDecoded} submitAnswer={this.submitAnswer}/>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )}\r\n        \r\n    }\r\n}\r\n","export const categories = [\r\n    {\r\n    \"id\": 9,\r\n    \"name\": \"General Knowledge\"\r\n    },\r\n    {\r\n    \"id\": 10,\r\n    \"name\": \"Entertainment: Books\"\r\n    },\r\n    {\r\n    \"id\": 11,\r\n    \"name\": \"Entertainment: Film\"\r\n    },\r\n    {\r\n    \"id\": 12,\r\n    \"name\": \"Entertainment: Music\"\r\n    },\r\n    {\r\n    \"id\": 13,\r\n    \"name\": \"Entertainment: Musicals & Theatres\"\r\n    },\r\n    {\r\n    \"id\": 14,\r\n    \"name\": \"Entertainment: Television\"\r\n    },\r\n    {\r\n    \"id\": 15,\r\n    \"name\": \"Entertainment: Video Games\"\r\n    },\r\n    {\r\n    \"id\": 16,\r\n    \"name\": \"Entertainment: Board Games\"\r\n    },\r\n    {\r\n    \"id\": 17,\r\n    \"name\": \"Science & Nature\"\r\n    },\r\n    {\r\n    \"id\": 18,\r\n    \"name\": \"Science: Computers\"\r\n    },\r\n    {\r\n    \"id\": 19,\r\n    \"name\": \"Science: Mathematics\"\r\n    },\r\n    {\r\n    \"id\": 20,\r\n    \"name\": \"Mythology\"\r\n    },\r\n    {\r\n    \"id\": 21,\r\n    \"name\": \"Sports\"\r\n    },\r\n    {\r\n    \"id\": 22,\r\n    \"name\": \"Geography\"\r\n    },\r\n    {\r\n    \"id\": 23,\r\n    \"name\": \"History\"\r\n    },\r\n    {\r\n    \"id\": 24,\r\n    \"name\": \"Politics\"\r\n    },\r\n    {\r\n    \"id\": 25,\r\n    \"name\": \"Art\"\r\n    },\r\n    {\r\n    \"id\": 26,\r\n    \"name\": \"Celebrities\"\r\n    },\r\n    {\r\n    \"id\": 27,\r\n    \"name\": \"Animals\"\r\n    },\r\n    {\r\n    \"id\": 28,\r\n    \"name\": \"Vehicles\"\r\n    },\r\n    {\r\n    \"id\": 29,\r\n    \"name\": \"Entertainment: Comics\"\r\n    },\r\n    {\r\n    \"id\": 30,\r\n    \"name\": \"Science: Gadgets\"\r\n    },\r\n    {\r\n    \"id\": 31,\r\n    \"name\": \"Entertainment: Japanese Anime & Manga\"\r\n    },\r\n    {\r\n    \"id\": 32,\r\n    \"name\": \"Entertainment: Cartoon & Animations\"\r\n    }\r\n    ]","import React, { Component } from 'react';\r\nimport './menu.css';\r\nimport {categories} from '../categoryList'\r\n\r\nexport default class menu extends Component {\r\n\r\n    constructor(props) {\r\n        super (props);\r\n        this.state = {\r\n            isRulesToggled: false,\r\n            isCategoriesToggled: false\r\n        }\r\n        this.toggleRules = this.toggleRules.bind(this);\r\n        this.toggleCategories = this.toggleCategories.bind(this);\r\n    }\r\n\r\n    toggleRules() {\r\n        this.setState({\r\n            isRulesToggled: !this.state.isRulesToggled,\r\n            isCategoriesToggled: false\r\n        })\r\n    }\r\n\r\n    toggleCategories() {\r\n        this.setState({\r\n            isCategoriesToggled: !this.state.isCategoriesToggled,\r\n            isRulesToggled: false\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {isRulesToggled, isCategoriesToggled} = this.state;\r\n        return (\r\n    <div className='main-menu-container'>\r\n\r\n    {!isCategoriesToggled ? <div className='header'>\r\n    <h1 className='title'>\r\n        Trivia quiz\r\n    </h1>\r\n    <div className='settings'>\r\n    <button className='button button-settings' onClick={this.toggleRules}>\r\n        <h3><i className='fas fa-list'></i> Rules</h3>\r\n    </button>\r\n    <button className='button button-categories' onClick={() => {\r\n        this.toggleCategories();\r\n        this.props.triviaSwitch();\r\n    }\r\n        }>\r\n        <h3><i className=\"fas fa-cog\"></i> Categories</h3>\r\n    </button>\r\n        </div>\r\n        {isRulesToggled ? <p className='rules-info'>Choose the category you like the most (or don't choose anything) and press start button.<br /> You will get Score-points for each correct answer, the amount of which depends on the difficulty <br />For each wrong answer you will lose score-points as well. <br/><br />Good luck to you!\r\n          </p> : null}\r\n          </div> : <div className='categories-container'>\r\n\r\n<h1>Category list</h1>\r\n<p>Choose any category you want to answer questions on!</p>\r\n<ul className='category-list'>\r\n    <li className='category-item'><button onClick={() => {\r\n        this.props.applyCategory(1);\r\n        this.toggleCategories()\r\n        }}>All categories (default)</button></li>\r\n    {categories.map(category => {\r\n        return <li \r\n        className='category-item' \r\n        key={category.id}><button onClick={() => {\r\n            this.props.applyCategory(category.id);\r\n            this.toggleCategories()\r\n        }}\r\n        >{category.name}</button></li>\r\n    })}\r\n</ul>\r\n</div>}\r\n          </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Trivia from './components/trivia';\nimport Menu from './components/menu';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      questions: null,\n      isTrivia: false,\n      isTriviaMenu: true,\n      category: 0,\n      difficulty: 0,\n      questionsNumber: 10\n    }\n    this.isTriviaSwitch = this.isTriviaSwitch.bind(this);\n    this.apiCall = this.apiCall.bind(this);\n    this.applyCategory = this.applyCategory.bind(this);\n    this.switchTriviaMenu = this.switchTriviaMenu.bind(this);\n  }\n\n  apiCall(URL) {\n    fetch(URL)\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        questions: data.results,\n        error: false\n      }\n      )\n    })\n    .catch(error => console.error(error), () => {\n      this.setState({\n        error: true\n      })\n    })\n  }\n\n  componentWillMount() {\n    this.apiCall('https://opentdb.com/api.php?amount=10')\n  }\n\n  isTriviaSwitch() {\n    this.setState({\n      isTrivia: !this.state.isTrivia\n    }, () => {\n      if (this.state.category !== 1 && this.state.category !== 0) {\n        this.apiCall('https://opentdb.com/api.php?amount=10&category='+this.state.category);\n      } else {\n        this.apiCall('https://opentdb.com/api.php?amount=10');\n      }\n    })\n  }\n\n  applyCategory(category) {\n    this.switchTriviaMenu();\n    this.setState({\n      isTrivia: false,\n      category: category\n    });\n    if (category === 1) {\n      this.apiCall('https://opentdb.com/api.php?amount=10');\n    } else {\n      this.apiCall(`https://opentdb.com/api.php?amount=10&category=${category}`);\n      console.log('current category: ' + category);\n    }\n  }\n\n  switchTriviaMenu() {\n    this.setState({\n      isTriviaMenu: !this.state.isTriviaMenu\n    })\n  }\n\n  render() {\n    const {isTrivia, questions, isTriviaMenu} = this.state;\n    if (!questions) {\n      return <div>LOADING</div>\n    } else {\n    return (\n      <div className='main-container'>\n        <div className='inner-container'>\n        <Menu applyCategory={this.applyCategory} triviaSwitch={this.switchTriviaMenu}/>\n        {isTriviaMenu ? <div className='trivia-menu'>\n  {this.state.isTrivia ? <Trivia questions={this.state.questions} isTriviaSwitch={this.isTriviaSwitch}/> : 'press start'}\n  <button onClick={this.isTriviaSwitch}>{isTrivia ? 'Menu' : 'Start!'}</button>\n        </div> : null}\n        \n        </div>\n      </div>\n    )\n  }\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
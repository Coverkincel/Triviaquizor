{"version":3,"sources":["components/answer.js","components/trivia.js","categoryList.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["Answer","answerStyle","_this","this","props","correctAnswer","value","showColors","background","react_default","a","createElement","disabled","className","onClick","submitAnswer","style","Component","Trivia","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","correctAnsNum","incorrectAnsNum","questionNumber","category","correct_answer","difficulty","incorrect_answers","question","answers","loading","isAnswersDisabled","currentScore","getQuestionData","bind","assertThisInitialized","decodeHTML","shuffleArray","updateQuestion","disableQuestion","handleScore","gameOver","coins","console","log","isTriviaSwitch","dispatch","type","html","txt","document","innerHTML","i","length","j","Math","floor","random","_ref","isCorrect","isGameOver","newScore","_this2","setState","setTimeout","_this3","currentQuestion","questions","decodedQuestion","push","_this4","data","_this5","_this6","_this$state","map","answer","answerDecoded","answer_Answer","questionsNumber","connect","hideUI","coinsMore","categories","id","name","menu","isRulesToggled","isCategoriesToggled","categoryName","toggleRules","toggleCategories","toggleShop","shopToggled","applyCategory","setCategoryName","key","triviaSwitch","dist_default","format","App","increment","addValue","error","isTrivia","isTriviaMenu","apiCall","switchTriviaMenu","buyItem","URL","fetch","then","response","json","results","catch","concat","isStarted","item","src_components_menu","lo","display","components_trivia","Boolean","window","location","hostname","match","initialState","items","skipper","corrects","store","createStore","arguments","undefined","action","objectSpread","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87f9b493.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './answer.css';\r\n\r\nexport default class Answer extends Component {\r\n  render() {\r\n    let answerStyle;\r\n    if (\r\n      this.props.correctAnswer === this.props.value &&\r\n      this.props.showColors\r\n    ) {\r\n      answerStyle = {\r\n        background: 'green'\r\n      };\r\n    } else if (this.props.showColors) {\r\n      answerStyle = {\r\n        background: 'red'\r\n      };\r\n    }\r\n\r\n    return (\r\n      <li>\r\n        <button\r\n          disabled={this.props.disabled}\r\n          className='answer'\r\n          onClick={() => this.props.submitAnswer(this.props.value)}\r\n          style={answerStyle}\r\n        >\r\n          {this.props.value}\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Answer from './answer';\r\nimport './trivia.css';\r\nimport {connect} from 'react-redux';\r\n\r\n class Trivia extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      correctAnsNum: 0,\r\n      incorrectAnsNum: 0,\r\n      questionNumber: 0,\r\n      category: '',\r\n      correct_answer: '',\r\n      difficulty: '',\r\n      incorrect_answers: [],\r\n      question: '',\r\n      answers: [],\r\n      loading: true,\r\n      isAnswersDisabled: false,\r\n      showColors: false,\r\n      currentScore: 0\r\n    };\r\n    this.getQuestionData = this.getQuestionData.bind(this);\r\n    this.decodeHTML = this.decodeHTML.bind(this);\r\n    this.shuffleArray = this.shuffleArray.bind(this);\r\n    this.submitAnswer = this.submitAnswer.bind(this);\r\n    this.updateQuestion = this.updateQuestion.bind(this);\r\n    this.disableQuestion = this.disableQuestion.bind(this);\r\n    this.handleScore = this.handleScore.bind(this);\r\n    this.gameOver = this.gameOver.bind(this);\r\n  }\r\n\r\n  gameOver(coins) {\r\n    // switch trivia and add game score to coins\r\n    console.log('coins' + coins)\r\n    this.props.isTriviaSwitch(false)\r\n    this.props.dispatch({type: \"ADD_VALUE\", value:coins})\r\n  }\r\n\r\n  decodeHTML(html) {\r\n    let txt = document.createElement('textarea');\r\n    txt.innerHTML = html;\r\n    return txt.value;\r\n  }\r\n\r\n  shuffleArray(a) {\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return a;\r\n  }\r\n\r\n  handleScore(isCorrect, isGameOver) {\r\n    // just adds newscore\r\n    let newScore;\r\n    switch (this.state.difficulty) {\r\n      case 'easy':\r\n        newScore = 100;\r\n        break;\r\n      case 'medium':\r\n        newScore = 200;\r\n        break;\r\n      case 'hard':\r\n        newScore = 300;\r\n        break;\r\n      default:\r\n        newScore = 0;\r\n    }\r\n    if (!isCorrect) {\r\n      newScore = -150;\r\n    }\r\n    if (this.state.currentScore + newScore <= 0) {\r\n      this.setState({\r\n        currentScore: 0\r\n      });\r\n    } else {\r\n      this.setState({\r\n        currentScore: this.state.currentScore + newScore\r\n      }, () => {\r\n        // if gameover these points will go into coins\r\n        if (isGameOver) {\r\n          setTimeout(() => this.props.dispatch({type: \"ADD_VALUE\", value: this.state.currentScore}), 2500)\r\n\r\n        \r\n        }\r\n      }) ;\r\n    }\r\n  }\r\n\r\n  getQuestionData() {\r\n    const currentQuestion = this.props.questions[this.state.questionNumber];\r\n    const decodedQuestion = this.decodeHTML(currentQuestion.question);\r\n    let incorrect_answers = currentQuestion.incorrect_answers;\r\n    incorrect_answers.push(currentQuestion.correct_answer);\r\n    const answers = this.shuffleArray(incorrect_answers);\r\n    const correctAnswer = this.decodeHTML(currentQuestion.correct_answer);\r\n    this.setState(\r\n      {\r\n        category: currentQuestion.category,\r\n        correct_answer: correctAnswer,\r\n        difficulty: currentQuestion.difficulty,\r\n        incorrect_answers: currentQuestion.incorrect_answers,\r\n        question: decodedQuestion,\r\n        answers: answers,\r\n        loading: false\r\n      },\r\n      () => {\r\n        this.setState({\r\n          isAnswersDisabled: false,\r\n          showColors: false\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  updateQuestion() {\r\n    this.setState(\r\n      {\r\n        questionNumber: this.state.questionNumber + 1\r\n      },\r\n      () => {\r\n        this.getQuestionData();\r\n      }\r\n    );\r\n  }\r\n\r\n  disableQuestion() {\r\n    this.setState({\r\n      isAnswersDisabled: true,\r\n      showColors: true\r\n    });\r\n  }\r\n\r\n  submitAnswer(data) {\r\n    if (data === this.state.correct_answer) {\r\n      this.setState({\r\n        correctAnsNum: this.state.correctAnsNum + 1\r\n      });\r\n      if (this.state.questionNumber === this.props.questions.length - 1) {\r\n        // right answer. set isTrivia to false (overflow) gameover ALREADY ZERO\r\n        this.disableQuestion();\r\n        this.handleScore(true, true);\r\n        setTimeout(() => this.gameOver(0), 3000);\r\n      } else {\r\n        // right answer. next question number (+1 state) and update question (no overflow)\r\n        this.disableQuestion();\r\n        this.handleScore(true, false);\r\n        setTimeout(this.updateQuestion, 2000);\r\n      }\r\n    } else {\r\n      this.setState({\r\n        incorrectAnsNum: this.state.incorrectAnsNum + 1\r\n      });\r\n      if (this.state.questionNumber === this.props.questions.length - 1) {\r\n        // wrong answer + overflow. set isTrivia to false gameover\r\n        this.handleScore(false, true);\r\n        this.disableQuestion();\r\n        setTimeout(() => this.gameOver(0), 3000);\r\n      } else {\r\n        // no overflow + wrong answer next question number (+1 state) and update question\r\n        this.handleScore(false, false);\r\n        this.disableQuestion();\r\n        setTimeout(this.updateQuestion, 2000);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestionData();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      correct_answer,\r\n      difficulty,\r\n      question,\r\n      answers,\r\n      loading\r\n    } = this.state;\r\n    if (loading) {\r\n      return <h1>loading!</h1>;\r\n    } else {\r\n      return (\r\n        <div className='trivia-container'>\r\n          <p className='difficulty'>\r\n            <i>Difficulty:</i> {difficulty}\r\n          </p>\r\n          <h3 className='question'>{question}</h3>\r\n          <ul className='answers-list'>\r\n            {answers.map(answer => {\r\n              const answerDecoded = this.decodeHTML(answer);\r\n              return (\r\n                <Answer\r\n                  showColors={this.state.showColors}\r\n                  correctAnswer={correct_answer}\r\n                  disabled={this.state.isAnswersDisabled}\r\n                  value={answerDecoded}\r\n                  submitAnswer={this.submitAnswer}\r\n                />\r\n              );\r\n            })}\r\n          </ul>\r\n          <div className='game-info'>\r\n            <h4 className='game-score'>\r\n\r\n\r\n              <p>Game score: {this.state.currentScore}</p>\r\n\r\n              \r\n            </h4>\r\n            <div className='score-col'>\r\n              <div className='answered'>{this.state.correctAnsNum}</div>\r\n              <div className='remaining'>\r\n                Remaining:&nbsp;\r\n                {this.props.questionsNumber - this.state.questionNumber}\r\n              </div>\r\n              <div className='unanswered'>{this.state.incorrectAnsNum}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  coins: state.coins,\r\n  hideUI: state.hideUI,\r\n  coinsMore: state.coinsMore\r\n})\r\n\r\nexport default connect(mapStateToProps)(Trivia);","export const categories = [\r\n  {\r\n    id: 9,\r\n    name: 'General Knowledge'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Entertainment: Books'\r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'Entertainment: Film'\r\n  },\r\n  {\r\n    id: 12,\r\n    name: 'Entertainment: Music'\r\n  },\r\n  {\r\n    id: 13,\r\n    name: 'Entertainment: Musicals & Theatres'\r\n  },\r\n  {\r\n    id: 14,\r\n    name: 'Entertainment: Television'\r\n  },\r\n  {\r\n    id: 15,\r\n    name: 'Entertainment: Video Games'\r\n  },\r\n  {\r\n    id: 16,\r\n    name: 'Entertainment: Board Games'\r\n  },\r\n  {\r\n    id: 17,\r\n    name: 'Science & Nature'\r\n  },\r\n  {\r\n    id: 18,\r\n    name: 'Science: Computers'\r\n  },\r\n  {\r\n    id: 19,\r\n    name: 'Science: Mathematics'\r\n  },\r\n  {\r\n    id: 20,\r\n    name: 'Mythology'\r\n  },\r\n  {\r\n    id: 21,\r\n    name: 'Sports'\r\n  },\r\n  {\r\n    id: 22,\r\n    name: 'Geography'\r\n  },\r\n  {\r\n    id: 23,\r\n    name: 'History'\r\n  },\r\n  {\r\n    id: 24,\r\n    name: 'Politics'\r\n  },\r\n  {\r\n    id: 25,\r\n    name: 'Art'\r\n  },\r\n  {\r\n    id: 26,\r\n    name: 'Celebrities'\r\n  },\r\n  {\r\n    id: 27,\r\n    name: 'Animals'\r\n  },\r\n  {\r\n    id: 28,\r\n    name: 'Vehicles'\r\n  },\r\n  {\r\n    id: 29,\r\n    name: 'Entertainment: Comics'\r\n  },\r\n  {\r\n    id: 30,\r\n    name: 'Science: Gadgets'\r\n  },\r\n  {\r\n    id: 31,\r\n    name: 'Entertainment: Japanese Anime & Manga'\r\n  },\r\n  {\r\n    id: 32,\r\n    name: 'Entertainment: Cartoon & Animations'\r\n  }\r\n];\r\n","import React, { Component } from 'react';\r\nimport './menu.css';\r\nimport { categories } from '../categoryList';\r\nimport {connect} from 'react-redux';\r\nimport Odometer from 'react-odometerjs';\r\n\r\nclass menu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isRulesToggled: false,\r\n      isCategoriesToggled: false,\r\n      categoryName: 'All categories'\r\n    };\r\n    this.toggleRules = this.toggleRules.bind(this);\r\n    this.toggleCategories = this.toggleCategories.bind(this);\r\n    this.toggleShop = this.toggleShop.bind(this);\r\n  }\r\n\r\n  toggleRules() {\r\n    this.setState({\r\n      isRulesToggled: !this.state.isRulesToggled,\r\n      isCategoriesToggled: false\r\n    });\r\n  }\r\n\r\n  toggleCategories() {\r\n    this.setState({\r\n      isCategoriesToggled: !this.state.isCategoriesToggled,\r\n      isRulesToggled: false\r\n    });\r\n  }\r\n\r\n  setCategoryName(categoryName) {\r\n    this.setState({\r\n      categoryName: categoryName\r\n    });\r\n  }\r\n\r\n  toggleShop() {\r\n    this.props.dispatch({type: \"TOOGLE_SHOP\"})\r\n  }\r\n\r\n  render() {\r\n    const {isCategoriesToggled, categoryName } = this.state;\r\n    return (\r\n      <div className='main-menu-container'>\r\n                    <h1 className='title'>Trivia quiz</h1>\r\n\r\n\r\n        {!this.props.shopToggled ? <div>\r\n          {!isCategoriesToggled ? (\r\n          <div className='header'>\r\n            \r\n            {!this.props.hideUI ? <div className='settings'>\r\n\r\n              <button\r\n                className='button button-categories'\r\n                onClick={() => {\r\n                  this.toggleCategories();\r\n                  this.props.triviaSwitch();\r\n                }}\r\n              >\r\n                <h3>\r\n                  <i className='fas fa-cog'></i> Categories\r\n                </h3>\r\n              </button>\r\n            </div> : null}\r\n            \r\n          </div>\r\n        ) : (\r\n          <div className='categories-container'>\r\n                    <div className='category'>\r\n\r\n          <div className='category-container'>\r\n            <h3 className='category-title'>Current category</h3>\r\n            <p className='category-name'>{categoryName}</p>\r\n          </div>\r\n\r\n\r\n          {!isCategoriesToggled ?           <div className=\"coins-container\">\r\n              <div className=\"coins\">\r\n              <i className=\"fas fa-coins\"></i> {this.props.coins}\r\n              </div>\r\n              <div className=\"shop\">\r\n                SHOP\r\n              </div>\r\n            </div> : null}\r\n\r\n\r\n        </div>\r\n            <h1>Category list</h1>\r\n            <p>Choose any category you want to answer questions on!</p>\r\n            <ul className='category-list'>\r\n              <li className='category-item'>\r\n                <button\r\n                  className='category-button'\r\n                  onClick={() => {\r\n                    this.props.applyCategory(1);\r\n                    this.toggleCategories();\r\n                    this.setCategoryName('All categories');\r\n                  }}\r\n                >\r\n                  All categories (default)\r\n                </button>\r\n              </li>\r\n              {categories.map(category => {\r\n                return (\r\n                  <li className='category-item' key={category.id}>\r\n                    <button\r\n                      onClick={() => {\r\n                        this.props.applyCategory(category.id);\r\n                        this.toggleCategories();\r\n                        this.setCategoryName(category.name);\r\n                      }}\r\n                      className='category-button'\r\n                    >\r\n                      {category.name}\r\n                    </button>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n        )}\r\n\r\n        </div> : null}\r\n\r\n        \r\n\r\n\r\n        {\r\n\r\n\r\n        }\r\n        {!isCategoriesToggled ?         <div className='category'>\r\n\r\n          {!this.props.shopToggled ? <div className='category-container'>\r\n            <h3 className='category-title'>Current category</h3>\r\n            <p className='category-name'>{categoryName}</p>\r\n          </div> : null}\r\n          \r\n\r\n\r\n\r\n\r\n              { !isCategoriesToggled ?           <div className=\"coins-container\">\r\n              <div className=\"coins\">\r\n              <i className=\"fas fa-coins\"></i> \r\n              <Odometer value={this.props.coins} format=\"(.ddd),dd\" />\r\n\r\n              </div>\r\n              {!this.props.hideUI ?               <div className=\"shop\">\r\n                \r\n                <button onClick={this.toggleShop}>              <i className=\"fas fa-shopping-cart\"></i>\r\n                SHOP</button>\r\n            \r\n              </div> : null}\r\n\r\n\r\n            </div> : null}\r\n\r\n\r\n        </div> : null}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  hideUI: state.hideUI,\r\n  coins: state.coins,\r\n  shopToggled: state.shopToggled\r\n})\r\n\r\nexport default connect(mapStateToProps)(menu);","import React, { Component } from 'react';\r\nimport Trivia from './components/trivia';\r\nimport Menu from './components/menu';\r\nimport './App.css';\r\nimport {connect} from 'react-redux';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      questions: null,\r\n      isTrivia: false,\r\n      isTriviaMenu: true,\r\n      category: 0,\r\n      difficulty: 0,\r\n      questionsNumber: 1\r\n    };\r\n    this.isTriviaSwitch = this.isTriviaSwitch.bind(this);\r\n    this.apiCall = this.apiCall.bind(this);\r\n    this.applyCategory = this.applyCategory.bind(this);\r\n    this.switchTriviaMenu = this.switchTriviaMenu.bind(this);\r\n    this.increment = this.increment.bind(this);\r\n    this.addValue = this.addValue.bind(this);\r\n    this.toggleShop = this.toggleShop.bind(this);\r\n    this.buyItem = this.buyItem.bind(this);\r\n  }\r\n\r\n  apiCall(URL) {\r\n    fetch(URL)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({\r\n          questions: data.results,\r\n          error: false\r\n        });\r\n      })\r\n      .catch(\r\n        error => console.error(error),\r\n        () => {\r\n          this.setState({\r\n            error: true\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n\r\n  componentWillMount() {\r\n    this.apiCall(\r\n      `https://opentdb.com/api.php?amount=${this.state.questionsNumber}`\r\n    );\r\n  }\r\n\r\n  isTriviaSwitch(isStarted) {\r\n    isStarted ? this.props.dispatch({type: \"ADD_VALUE\", value: -50}) : console.log('passed')\r\n    this.props.dispatch({type: \"SWITCH_UI\"})\r\n    this.setState(\r\n      {\r\n        isTrivia: !this.state.isTrivia\r\n      },\r\n      () => {\r\n        if (this.state.category !== 1 && this.state.category !== 0) {\r\n          this.apiCall(\r\n            `https://opentdb.com/api.php?amount=${this.state.questionsNumber}&category=` +\r\n              this.state.category\r\n          );\r\n        } else {\r\n          this.apiCall(\r\n            `https://opentdb.com/api.php?amount=${this.state.questionsNumber}`\r\n          );\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  applyCategory(category) {\r\n    this.switchTriviaMenu();\r\n    this.setState({\r\n      isTrivia: false,\r\n      category: category\r\n    });\r\n    if (category === 1) {\r\n      this.apiCall(\r\n        `https://opentdb.com/api.php?amount=${this.state.questionsNumber}`\r\n      );\r\n    } else {\r\n      this.apiCall(\r\n        `https://opentdb.com/api.php?amount=15&category=${category}`\r\n      );\r\n    }\r\n  }\r\n\r\n  switchTriviaMenu() {\r\n    this.setState({\r\n      isTriviaMenu: !this.state.isTriviaMenu\r\n    });\r\n  }\r\n\r\n  increment = () => {\r\n    this.props.dispatch({type: \"INCREMENT\"})\r\n  }\r\n\r\n  addValue = (value) => {\r\n    this.props.dispatch({type: \"ADD_VALUE\", value: value})\r\n  }\r\n\r\n  toggleShop() {\r\n    this.props.dispatch({type: \"TOOGLE_SHOP\"})\r\n  }\r\n\r\n  buyItem(item) {\r\n    if (item === 'skipper') {\r\n      this.props.dispatch({type: \"BUY_ITEM\", item: 'skipper'})\r\n    } else if (item === 'correct') {\r\n      this.props.dispatch({type: \"BUY_ITEM\", item: 'correct'})\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { isTrivia, questions, isTriviaMenu } = this.state;\r\n    if (!questions) {\r\n      return <div>LOADING</div>;\r\n    } else {\r\n      return (\r\n\r\n        <div className='main-container'>\r\n          <div className='inner-container'>\r\n            <div className=\"game\">\r\n\r\n        {/* \r\n            <button onClick={this.increment}>+</button>\r\n          <button onClick = {() => this.addValue(10)}>REDUX ADD 10</button>\r\n          <br/>\r\n\r\n            coinsmore : {this.props.coinsMore ? \"true\" : 'flase'}\r\n            REDUX HIDEUI: {this.props.hideUI ? \"true\" : \"false\"} <br/>\r\n            REDUX COINS: {this.props.coins}\r\n*/}\r\n\r\n            <Menu\r\n              applyCategory={this.applyCategory}\r\n              triviaSwitch={this.switchTriviaMenu}\r\n            />\r\n    {!this.props.shopToggled ?             <div>\r\n            {isTriviaMenu ? (\r\n              <div className='trivia-menu'>\r\n                <button className='button' onClick={() => this.isTriviaSwitch(this.props.coinsMore)}>\r\n                  {' '}\r\n                  {isTrivia ? (\r\n                    <i className='fas fa-undo-alt'></i>\r\n                  ) : (\r\n                    <i className='far fa-play-circle'></i>\r\n                  )}\r\n                  {isTrivia ? ' Close' : \r\n                  <div> \r\n                    \r\n                    <div>START \r\n                      {this.props.coinsMore ? <p style={{display: \"inline\"}}>-50  <i className=\"fas fa-coins\"></i></p> : null}\r\n                       </div>\r\n                    \r\n                    </div>\r\n                  \r\n                  }\r\n                </button>\r\n                {this.state.isTrivia ? (\r\n                  <Trivia\r\n                    questions={this.state.questions}\r\n                    isTriviaSwitch={this.isTriviaSwitch}\r\n                    questionsNumber={this.state.questionsNumber}\r\n                  />\r\n                ) : (\r\n                  null\r\n                )}\r\n              </div>\r\n\r\n            ) : null}\r\n                        </div> : \r\n                        <div className=\"shop-component\">\r\n                          <ul className=\"shop-items\"> \r\n                            <li className='shop-item'>\r\n                              <button onClick={() => this.buyItem('skipper')} className='switchTriviaButton'>\r\n                              Question skipper\r\n                              </button>\r\n\r\n                              </li>\r\n                              <li className='shop-item'>\r\n                              <button  onClick={() => this.buyItem('correct') }  className='switchTriviaButton' >\r\n                              Correct answer\r\n                              </button>\r\n                              </li>\r\n                              <li className='shop-item' lo>\r\n                              <button onClick={this.toggleShop} className='switchTriviaButton'>\r\n                              BACK\r\n                              </button>\r\n                              </li>\r\n                          </ul>\r\n                        </div>\r\n                        }\r\n\r\n          </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  coins: state.coins,\r\n  hideUI: state.hideUI,\r\n  coinsMore: state.coinsMore,\r\n  shopToggled: state.shopToggled\r\n})\r\n\r\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\n\r\nconst initialState = {\r\n    hideUI: false,\r\n    coins: 100,\r\n    coinsMore: true,\r\n    shopToggled: false,\r\n    items: {\r\n        skipper: 0,\r\n        corrects: 0\r\n    }\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n    let coinsMore = true\r\n    switch(action.type) {\r\n        case 'INCREMENT':\r\n            if (state.coins + 1 > 49) {\r\n                coinsMore = true\r\n            } else {\r\n                coinsMore = false\r\n            }\r\n            return {\r\n                ...state,\r\n                coins: state.coins + 1,\r\n                coinsMore: coinsMore\r\n            }\r\n        case \"ADD_VALUE\":\r\n            if (state.coins + action.value > 49) {\r\n                coinsMore = true\r\n            } else {\r\n                coinsMore = false\r\n            }\r\n            return {\r\n                ...state,\r\n                coins: state.coins + action.value,\r\n                coinsMore: coinsMore\r\n            }\r\n        case \"SWITCH_UI\": {\r\n            return {\r\n                ...state,\r\n                hideUI: !state.hideUI\r\n            }\r\n        }\r\n\r\n        case \"TOOGLE_SHOP\":\r\n            console.log('to')\r\n            return {\r\n                ...state,\r\n                shopToggled: !state.shopToggled\r\n            }\r\n\r\n        case \"BUY_ITEM\":\r\n            if (action.item === 'skipper') {\r\n                return {\r\n                    ...state,\r\n                    items: {\r\n                        corrects: state.items.corrects,\r\n                        skipper: state.items.skipper + 1\r\n                    }\r\n                }\r\n            } else if (action.item === 'correct') {\r\n                return {\r\n                    ...state,\r\n                    items: {\r\n                        skipper: state.items.skipper,\r\n                        corrects: state.items.corrects + 1\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        default: return state;\r\n        }\r\n}\r\n\r\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n<App />\r\n</Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/answer.js","components/trivia.js","categoryList.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["Answer","answerStyle","_this","this","props","correctAnswer","value","showColors","background","react_default","a","createElement","disabled","className","onClick","submitAnswer","style","Component","Trivia","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","questionNumber","category","correct_answer","difficulty","incorrect_answers","question","answers","loading","isAnswersDisabled","currentScore","getQuestionData","bind","assertThisInitialized","decodeHTML","shuffleArray","updateQuestion","disableQuestion","handleScore","html","txt","document","innerHTML","i","length","j","Math","floor","random","_ref","isCorrect","newScore","setState","_this2","currentQuestion","questions","decodedQuestion","push","_this3","data","setTimeout","isTriviaSwitch","_this4","_this$state","map","answer","answerDecoded","answer_Answer","categories","id","name","menu","isRulesToggled","isCategoriesToggled","categoryName","toggleRules","toggleCategories","applyCategory","setCategoryName","key","triviaSwitch","App","questionsNumber","error","isTrivia","isTriviaMenu","apiCall","switchTriviaMenu","URL","fetch","then","response","json","results","catch","console","concat","menu_menu","trivia_Trivia","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cee1a109.chunk.js","sourcesContent":["import React, {\r\n    Component\r\n} from 'react';\r\nimport './answer.css';\r\n\r\nexport default class Answer extends Component {\r\n    render() {\r\n            let answerStyle;\r\n            if (this.props.correctAnswer === this.props.value && this.props.showColors) {\r\n                answerStyle = {\r\n                    background: 'green'\r\n                }\r\n            } else if (this.props.showColors) {\r\n                answerStyle = {\r\n                    background: 'red'\r\n                }\r\n            }\r\n\r\n        return (\r\n            <li>\r\n                <button disabled={this.props.disabled} className='answer' onClick={()=>\r\n                    this.props.submitAnswer(this.props.value)} style={answerStyle} >{this.props.value}</button>\r\n            </li>\r\n        )\r\n    }\r\n}","import React, {\r\n    Component\r\n} from 'react'\r\nimport Answer from './answer';\r\nimport './trivia.css';\r\n\r\nexport default class Trivia extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            questionNumber: 0,\r\n            category: '',\r\n            correct_answer: '',\r\n            difficulty: '',\r\n            incorrect_answers: [],\r\n            question: '',\r\n            answers: [],\r\n            loading: true,\r\n            isAnswersDisabled: false,\r\n            showColors: false,\r\n            currentScore: 0\r\n        }\r\n        this.getQuestionData = this.getQuestionData.bind(this);\r\n        this.decodeHTML = this.decodeHTML.bind(this);\r\n        this.shuffleArray = this.shuffleArray.bind(this);\r\n        this.submitAnswer = this.submitAnswer.bind(this);\r\n        this.updateQuestion = this.updateQuestion.bind(this);\r\n        this.disableQuestion = this.disableQuestion.bind(this);\r\n        this.handleScore = this.handleScore.bind(this);\r\n    }\r\n\r\n    decodeHTML(html) {\r\n        let txt = document.createElement(\"textarea\");\r\n        txt.innerHTML = html;\r\n        return txt.value;\r\n    }\r\n\r\n    shuffleArray(a) {\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n        return a;\r\n    }\r\n\r\n    handleScore(isCorrect) {\r\n        let newScore;\r\n        switch (this.state.difficulty) {\r\n            case \"easy\":\r\n                newScore = 100;\r\n                break;\r\n            case \"medium\":\r\n                newScore = 200;\r\n                break;\r\n            case \"hard\":\r\n                newScore = 300;\r\n                break;\r\n            default:\r\n                newScore = 0;\r\n        }\r\n        if (!isCorrect) {\r\n            newScore = -newScore\r\n        }\r\n        this.setState({\r\n            currentScore: this.state.currentScore + newScore\r\n        })\r\n    }\r\n\r\n    getQuestionData() {\r\n        const currentQuestion = this.props.questions[this.state.questionNumber];\r\n        const decodedQuestion = this.decodeHTML(currentQuestion.question);\r\n        let incorrect_answers = currentQuestion.incorrect_answers;\r\n        incorrect_answers.push(currentQuestion.correct_answer);\r\n        const answers = this.shuffleArray(incorrect_answers);\r\n        const correctAnswer = this.decodeHTML(currentQuestion.correct_answer);\r\n        this.setState({\r\n            category: currentQuestion.category,\r\n            correct_answer: correctAnswer,\r\n            difficulty: currentQuestion.difficulty,\r\n            incorrect_answers: currentQuestion.incorrect_answers,\r\n            question: decodedQuestion,\r\n            answers: answers,\r\n            loading: false\r\n        }, () => {\r\n            this.setState({\r\n                isAnswersDisabled: false,\r\n                showColors: false\r\n            })\r\n        });\r\n    }\r\n\r\n    updateQuestion() {\r\n        this.setState({\r\n            questionNumber: this.state.questionNumber + 1,\r\n        }, () => {\r\n            this.getQuestionData();\r\n        });\r\n    }\r\n\r\n    disableQuestion() {\r\n        this.setState({\r\n            isAnswersDisabled: true,\r\n            showColors: true\r\n        })\r\n    }\r\n\r\n    submitAnswer(data) {\r\n        if (data === this.state.correct_answer) {\r\n            if (this.state.questionNumber === this.props.questions.length - 1) {\r\n                // right answer. set isTrivia to false (overflow)\r\n                this.disableQuestion()\r\n                this.handleScore(false);\r\n                setTimeout(this.props.isTriviaSwitch, 3000)\r\n            } else {\r\n                // right answer. next question number (+1 state) and update question (no overflow)\r\n                this.disableQuestion();\r\n                this.handleScore(true);\r\n                setTimeout(this.updateQuestion, 2000);\r\n            }\r\n        } else {\r\n            if (this.state.questionNumber === this.props.questions.length - 1) {\r\n                // wrong answer + overflow. set isTrivia to false\r\n                this.handleScore(false);\r\n                this.disableQuestion();\r\n                setTimeout(this.props.isTriviaSwitch, 3000)\r\n            } else {\r\n                // no overflow + wrong answer next question number (+1 state) and update question\r\n                this.handleScore(false);\r\n                this.disableQuestion();\r\n                setTimeout(this.updateQuestion, 2000);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getQuestionData()\r\n    }\r\n\r\n    render() {\r\n            const {\r\n                correct_answer,\r\n                difficulty,\r\n                question,\r\n                answers,\r\n                loading\r\n            } = this.state;\r\n            if (loading) {\r\n            return <h1>loading!</h1>\r\n        } else {\r\n        return (\r\n            <div className='trivia-container'>\r\n                <p className='difficulty'><i>Difficulty:</i> {difficulty}</p>\r\n                <h3 className='question'>{question}</h3>\r\n                <ul className='answers-list'>\r\n                    {\r\n                    answers.map(answer => {\r\n                    const answerDecoded = this.decodeHTML(answer);\r\n                    return <Answer showColors={this.state.showColors} correctAnswer={correct_answer}\r\n                        disabled={this.state.isAnswersDisabled} value={answerDecoded}\r\n                        submitAnswer={this.submitAnswer} />\r\n                    })\r\n                    }\r\n                </ul>\r\n                <h4>Your score: {this.state.currentScore}</h4>\r\n            </div>\r\n        )}\r\n        \r\n    }\r\n}\r\n","export const categories = [\r\n    {\r\n    \"id\": 9,\r\n    \"name\": \"General Knowledge\"\r\n    },\r\n    {\r\n    \"id\": 10,\r\n    \"name\": \"Entertainment: Books\"\r\n    },\r\n    {\r\n    \"id\": 11,\r\n    \"name\": \"Entertainment: Film\"\r\n    },\r\n    {\r\n    \"id\": 12,\r\n    \"name\": \"Entertainment: Music\"\r\n    },\r\n    {\r\n    \"id\": 13,\r\n    \"name\": \"Entertainment: Musicals & Theatres\"\r\n    },\r\n    {\r\n    \"id\": 14,\r\n    \"name\": \"Entertainment: Television\"\r\n    },\r\n    {\r\n    \"id\": 15,\r\n    \"name\": \"Entertainment: Video Games\"\r\n    },\r\n    {\r\n    \"id\": 16,\r\n    \"name\": \"Entertainment: Board Games\"\r\n    },\r\n    {\r\n    \"id\": 17,\r\n    \"name\": \"Science & Nature\"\r\n    },\r\n    {\r\n    \"id\": 18,\r\n    \"name\": \"Science: Computers\"\r\n    },\r\n    {\r\n    \"id\": 19,\r\n    \"name\": \"Science: Mathematics\"\r\n    },\r\n    {\r\n    \"id\": 20,\r\n    \"name\": \"Mythology\"\r\n    },\r\n    {\r\n    \"id\": 21,\r\n    \"name\": \"Sports\"\r\n    },\r\n    {\r\n    \"id\": 22,\r\n    \"name\": \"Geography\"\r\n    },\r\n    {\r\n    \"id\": 23,\r\n    \"name\": \"History\"\r\n    },\r\n    {\r\n    \"id\": 24,\r\n    \"name\": \"Politics\"\r\n    },\r\n    {\r\n    \"id\": 25,\r\n    \"name\": \"Art\"\r\n    },\r\n    {\r\n    \"id\": 26,\r\n    \"name\": \"Celebrities\"\r\n    },\r\n    {\r\n    \"id\": 27,\r\n    \"name\": \"Animals\"\r\n    },\r\n    {\r\n    \"id\": 28,\r\n    \"name\": \"Vehicles\"\r\n    },\r\n    {\r\n    \"id\": 29,\r\n    \"name\": \"Entertainment: Comics\"\r\n    },\r\n    {\r\n    \"id\": 30,\r\n    \"name\": \"Science: Gadgets\"\r\n    },\r\n    {\r\n    \"id\": 31,\r\n    \"name\": \"Entertainment: Japanese Anime & Manga\"\r\n    },\r\n    {\r\n    \"id\": 32,\r\n    \"name\": \"Entertainment: Cartoon & Animations\"\r\n    }\r\n    ]","import React, {\r\n    Component\r\n} from 'react';\r\nimport './menu.css';\r\nimport {\r\n    categories\r\n} from '../categoryList'\r\n\r\nexport default class menu extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isRulesToggled: false,\r\n            isCategoriesToggled: false,\r\n            categoryName: 'All categories'\r\n        }\r\n        this.toggleRules = this.toggleRules.bind(this);\r\n        this.toggleCategories = this.toggleCategories.bind(this);\r\n    }\r\n\r\n    toggleRules() {\r\n        this.setState({\r\n            isRulesToggled: !this.state.isRulesToggled,\r\n            isCategoriesToggled: false\r\n        })\r\n    }\r\n\r\n    toggleCategories() {\r\n        this.setState({\r\n            isCategoriesToggled: !this.state.isCategoriesToggled,\r\n            isRulesToggled: false\r\n        })\r\n    }\r\n\r\n    setCategoryName(categoryName) {\r\n        this.setState({\r\n            categoryName: categoryName\r\n        })\r\n    }\r\n\r\n    render() {\r\n            const {\r\n                isRulesToggled,\r\n                isCategoriesToggled,\r\n                categoryName\r\n            } = this.state;\r\n            return (\r\n<div className='main-menu-container'>\r\n    {!isCategoriesToggled ? <div className='header'>\r\n        <h1 className='title'>\r\n            Trivia quiz\r\n        </h1>\r\n        <div className='settings'>\r\n            <button className='button button-settings' onClick={this.toggleRules}>\r\n                <h3><i className='fas fa-list'></i> Rules</h3>\r\n            </button>\r\n            <button className='button button-categories' onClick={()=> {\r\n                this.toggleCategories();\r\n                this.props.triviaSwitch();\r\n                }\r\n                }>\r\n                <h3><i className=\"fas fa-cog\"></i> Categories</h3>\r\n            </button>\r\n        </div>\r\n        {isRulesToggled ? <p className='rules-info'>Choose the category you like the most (or don't choose anything) and\r\n            press start button.<br /> You will get Score-points for each correct answer, the amount of which depends on\r\n            the difficulty <br />For each wrong answer you will lose score-points as well. <br /><br />Good luck to you!\r\n        </p> : null}\r\n    </div> : <div className='categories-container'>\r\n        <h1>Category list</h1>\r\n        <p>Choose any category you want to answer questions on!</p>\r\n        <ul className='category-list'>\r\n            <li className='category-item'><button className='category-button' onClick={()=> {\r\n                    this.props.applyCategory(1);\r\n                    this.toggleCategories();\r\n                    this.setCategoryName('All categories');\r\n                    }}>All categories (default)</button></li>\r\n            {categories.map(category => {\r\n            return <li className='category-item' key={category.id}><button onClick={()=> {\r\n                    this.props.applyCategory(category.id);\r\n                    this.toggleCategories();\r\n                    this.setCategoryName(category.name);\r\n                    }}\r\n                    className='category-button'\r\n                    >{category.name}</button></li>\r\n            })}\r\n        </ul>\r\n    </div>}\r\n    <div className='category'>\r\n        <div className='category-container'>\r\n            <h3 className='category-title'>Current category</h3>\r\n            <p className='category-name'>{categoryName}</p>\r\n        </div>\r\n    </div>\r\n</div>\r\n        )\r\n        }\r\n        }","import React, {\n  Component\n} from 'react';\nimport Trivia from './components/trivia';\nimport Menu from './components/menu';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      questions: null,\n      isTrivia: false,\n      isTriviaMenu: true,\n      category: 0,\n      difficulty: 0,\n      questionsNumber: 10\n    }\n    this.isTriviaSwitch = this.isTriviaSwitch.bind(this);\n    this.apiCall = this.apiCall.bind(this);\n    this.applyCategory = this.applyCategory.bind(this);\n    this.switchTriviaMenu = this.switchTriviaMenu.bind(this);\n  }\n\n  questionsNumber = this.state;\n\n  apiCall(URL) {\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          questions: data.results,\n          error: false\n        })\n      })\n      .catch(error => console.error(error), () => {\n        this.setState({\n          error: true\n        })\n      })\n  }\n\n  componentWillMount() {\n    this.apiCall('https://opentdb.com/api.php?amount=15')\n  }\n\n  isTriviaSwitch() {\n    this.setState({\n      isTrivia: !this.state.isTrivia\n    }, () => {\n      if (this.state.category !== 1 && this.state.category !== 0) {\n        this.apiCall('https://opentdb.com/api.php?amount=15&category=' + this.state.category);\n      } else {\n        this.apiCall('https://opentdb.com/api.php?amount=15');\n      }\n    })\n  }\n\n  applyCategory(category) {\n    this.switchTriviaMenu();\n    this.setState({\n      isTrivia: false,\n      category: category\n    });\n    if (category === 1) {\n      this.apiCall('https://opentdb.com/api.php?amount=15');\n    } else {\n      this.apiCall(`https://opentdb.com/api.php?amount=15&category=${category}`);\n    }\n  }\n\n  switchTriviaMenu() {\n    this.setState({\n      isTriviaMenu: !this.state.isTriviaMenu\n    })\n  }\n\n  render() {\n      const {\n        isTrivia,\n        questions,\n        isTriviaMenu\n      } = this.state;\n      if (!questions) {\n      return <div>LOADING</div>\n    } else {\n    return (\n      <div className='main-container'>\n        <div className='inner-container'>\n          <Menu applyCategory={this.applyCategory} triviaSwitch={this.switchTriviaMenu} />\n\n          {isTriviaMenu ? <div className='trivia-menu'>\n\n            <button className='button' onClick={this.isTriviaSwitch}> {isTrivia ? <i className='fas fa-undo-alt'></i>:<i\n                className='far fa-play-circle'></i>}\n              {isTrivia ? ' Close' : ' Start!'}</button>\n            {this.state.isTrivia ?\n            <Trivia questions={this.state.questions} isTriviaSwitch={this.isTriviaSwitch} /> : null}\n\n          </div> : null}\n        </div>\n      </div>\n    )\n  }\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}